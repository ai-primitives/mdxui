name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm run build
      - run: pnpm run test
      - run: pnpm run lint

  release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      - run: pnpm install
      - run: pnpm add -w -D semantic-release
      - run: pnpm run build
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          # Configure git for semantic-release
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Create .npmrc for publishing
          cat << EOF > .npmrc
          //registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}
          registry=https://registry.npmjs.org/
          always-auth=true
          provenance=true
          EOF
          
          # Function to get next version using semantic-release
          get_next_version() {
            npx semantic-release --dry-run | grep -oP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+" || echo "none"
          }
          
          # Create semantic-release config
          create_release_config() {
            cat << EOF > .releaserc.json
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "releaseRules": [
                  {"type": "feat", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "build", "release": "patch"},
                  {"type": "ci", "release": "patch"},
                  {"type": "chore", "release": "patch"}
                ]
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "angular"
              }],
              ["@semantic-release/github", {
                "successComment": false,
                "failComment": false
              }],
              "@semantic-release/changelog"
            ],
            "tagFormat": "v\${version}",
            "dryRun": false,
            "ci": true,
            "debug": true
          }
          EOF
          }
          
          # Process each package
          for dir in packages/*; do
            if [ -f "$dir/package.json" ]; then
              echo "Processing $dir"
              cd $dir
              
              # Create semantic-release config for this package
              create_release_config
              
              # Convert workspace dependencies to * before versioning
              node -e "
                const fs = require('fs');
                const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
                
                function convertDeps(deps) {
                  if (!deps) return {};
                  return Object.fromEntries(
                    Object.entries(deps).map(([key, value]) => [
                      key,
                      value.startsWith('workspace:') ? '*' : value
                    ])
                  );
                }
                
                pkg.dependencies = convertDeps(pkg.dependencies);
                pkg.devDependencies = convertDeps(pkg.devDependencies);
                
                fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
              "
              
              # Get next version
              NEXT_VERSION=$(get_next_version)
              
              if [ "$NEXT_VERSION" != "none" ]; then
                echo "Publishing version $NEXT_VERSION"
                
                # Update version in package.json
                node -e "
                  const fs = require('fs');
                  const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
                  pkg.version = '$NEXT_VERSION';
                  fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
                "
                
                # Publish using pnpm
                pnpm publish --provenance --no-git-checks --access public
                
                # Create GitHub release using semantic-release
                GITHUB_TOKEN=$GITHUB_TOKEN npx semantic-release --no-ci
              else
                echo "No new version to publish"
              fi
              
              cd ../..
            fi
          done
